/*! Sifrr.Cli v0.0.4 - sifrr project | MIT licensed | https://github.com/sifrr/sifrr */
import e from"fs";import t from"path";import r from"mkdirp";var n={elementGenerate:n=>{const o=n.name;((n,o,s=!1)=>(r.sync(t.dirname(n),e=>{if(e)throw e}),e.existsSync(n)&&!s?(process.stderr.write(`File already exists at ${n}`),process.exit(1),!1):(e.writeFileSync(n,o,e=>{if(e)throw e}),process.stdout.write(`File was saved at '${n}'!`),!0)))(t.resolve(n.path,`./${o.split("-").join("/")}.js`),((e,t)=>`import SifrrDom from '@sifrr/dom';\n\nclass ${e} extends SifrrDom.Element${t?`.extends(${t})`:""} {\n  static get template() {\n    return \`\x3c!-- HTML --\x3e\`;\n  }\n\n  onConnect() {\n\n  }\n\n  onDisconnect() {\n\n  }\n}\n${e}.defaultState = {};\nSifrrDom.register(${e}${t?", { extends: '/* tag of html to extend, eg. tr */' }":""});\n\nexport default ${e};\n`)(o.replace(/-([a-z])/g,e=>e[1].toUpperCase()).replace(/^([a-z])/,e=>e[0].toUpperCase()),n.extends),"true"===n.force)}},o=n.elementGenerate;export default n;export{o as elementGenerate};
/*! (c) @aadityataparia */
